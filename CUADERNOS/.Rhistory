B=matrix(c(2,3,2,1))
B
B=matrix(c(2,3,2,1), nrow=2)
B=matrix(c(2,3,2,1), nrow=2)
B
B=matrix(c(2,3,2,1), nrow=2)
B
B=matrix(c(2,3,2,1), nrow=2)
B
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B
B=matrix(c(2,3,2,1), nrow=2, byrow = T)
B
eigen(B)
3/sqrt(13)
2/sqrt(13)
data=c(1,   1,  1,  0,  0,3,    3,  3,  0,  0,4,    4,  4,  0,  0,5,    5,  5,  0,
0,0, 2,  0,  4,  4,0,    0,  0,  5,  5,0,    1,  0,  2,  2)
A=matrix(data, nrow=7, byrow = T)
peliculas=c("Matrix", "Alien", "Serenity","Casablanca", "Amelie")
individuos=c("Pedro","Adriana", "Teo", "Andres", "Manuel", "Javier", "Maria")
colnames(A)=peliculas
rownames(A)=individuos
A
data=c(1,   1,  1,  0,  0,3,    3,  3,  0,  0,4,    4,  4,  0,  0,5,    5,  5,  0,
0,0, 2,  0,  4,  4,0,    0,  0,  5,  5,0,    1,  0,  2,  2)
A=matrix(data, nrow=7, byrow = T)
peliculas=c("Matrix", "Alien", "Serenity","Casablanca", "Amelie")
individuos=c("Pedro","Adriana", "Teo", "Andres", "Manuel", "Javier", "Maria")
colnames(A)=peliculas
rownames(A)=individuos
A
cor(A)
library(psych)
corPlot(A)
library("factoextra")
library("FactoMineR")
library("factoextra")
library("FactoMineR")
peliculas_pca=PCA(A, graph = F)
peliculas_pca
peliculas_pca=PCA(A, graph = F)
peliculas_pca
library("factoextra")
library("FactoMineR")
library("factoextra")
library("FactoMineR")
library("factoextra")
library("FactoMineR")
library("factoextra")
library("FactoMineR")
class(peliculas_pca)
peliculas_pca$eig
peliculas_pca$var$coord
get_eigenvalue(peliculas_pca)
peliculas_pca$eig
fviz_eig(peliculas_pca, addlabels=T)
fviz_pca_var(peliculas_pca,repel = T, colvar="cos2", col.var = "contrib", alpha.var = "contrib", gradient.cols=c("#FF0000","#FFFF00","#00FF00"))
get_pca_var(peliculas_pca)
get_pca_var(peliculas_pca)$coord[,1:3]
get_pca_var(peliculas_pca)$coord[,1:2]
get_pca_var(peliculas_pca)$contrib[,1:5]
peliculas_pca$var$cos2
corrplot(get_pca_var(peliculas_pca)$cos2)
library(corrplot)
library(corrplot)
corrplot(get_pca_var(peliculas_pca)$cos2)
colSums(get_pca_var(peliculas_pca)$contrib)
fviz_contrib(peliculas_pca, choice = "var", axes=1)
fviz_contrib(peliculas_pca, choice = "var", axes=2)
fviz_contrib(peliculas_pca, choice = "var", axes=3)
fviz_pca_biplot(peliculas_pca)
A=as.data.frame(A)
library(GGally)
ggpairs(A)
library(dplyr)
data("iris")
iris %>%  head(200) %>%
select(1:5) %>%
DT::datatable()
Iris=iris[,1:4]
Iris
library(psych)
corPlot(Iris, cex = 1.2, main = "Matriz de correlación")
Iris_pca=PCA(Iris, graph = F)
Iris_pca=PCA(Iris, graph = F)
get_eigenvalue(Iris_pca)
fviz_eig(Iris_pca, addlabels=T)
fviz_pca_var(Iris_pca,repel = T, colvar="cos2", col.var = "contrib", alpha.var = "contrib", gradient.cols=c("#FF0000","#FFFF00","#00FF00"))
Iris_pca$var$contrib
library(corrplot)
corrplot(get_pca_var(Iris_pca)$cos2)
iris
iris_pca_anal_sup=PCA(iris, quali.sup = 5, graph = F)
iris_pca_anal_sup$var$coord
iris_pca_anal_sup$quali.sup
fviz_pca_var(iris_pca_anal_sup)
fviz_pca_var(iris_pca_anal_sup, axes=c(1,3), geom = c("arrow", "text") )
fviz_pca_ind(iris_pca_anal_sup, addEllipses = T, habillage = 5)
library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 5000, value = 1000),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$simText <- renderText({
paste("AR(1) con parámetro:", input$ar, "y", input$n, "observaciones")
})
output$simPlot <- renderPlot({
set.seed(123)
simData <- arima.sim(n = input$n, list(ar = input$ar))
ggtsdisplay(simData)
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 30, max = 1000, value = 1000),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$simText <- renderText({
paste("AR(1) con parámetro:", input$ar, "y", input$n, "observaciones")
})
output$simPlot <- renderPlot({
set.seed(123)
simData <- arima.sim(n = input$n, list(ar = input$ar))
ggtsdisplay(simData)
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 1000, value = 10),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 1000, value = 100),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de AR(1)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 1000, value = 100),
sliderInput("ar", "Parámetro AR:",
min = -0.9, max = 0.9, value = 0.1, step = 0.1)
),
mainPanel(
textOutput("simText"),
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$simText <- renderText({
paste("AR(1) con parámetro:", input$ar, "y", input$n, "observaciones")
})
output$simPlot <- renderPlot({
set.seed(123)
simData <- arima.sim(n = input$n, list(ar = input$ar))
ggtsdisplay(simData)
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
library(shiny)
library(forecast) # para ggtsdisplay()
library(TTR) # para la función SMA, si es necesaria
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de Modelo AR(p)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 5000, value = 1000),
sliderInput("p", "Orden del modelo AR(p):",
min = 1, max = 5, value = 1),
uiOutput("ar_sliders")
),
mainPanel(
plotOutput("simPlot")
)
)
)
library(shiny)
library(forecast) # para ggtsdisplay()
library(TTR) # para la función SMA, si es necesaria
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de Modelo AR(p)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 5000, value = 1000),
sliderInput("p", "Orden del modelo AR(p):",
min = 1, max = 5, value = 1),
uiOutput("ar_sliders")
),
mainPanel(
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$ar_sliders <- renderUI({
sliderInputs <- lapply(1:input$p, function(i) {
sliderInput(
inputId = paste0("ar", i),
label = paste("Coeficiente AR", i, ":"),
min = -0.9, max = 0.9, value = 0, step = 0.1
)
})
do.call(tagList, sliderInputs)
})
simulatedData <- reactive({
set.seed(123)
ar_coefs <- sapply(1:input$p, function(i) input[[paste0("ar", i)]])
arima.sim(n = input$n, list(ar = ar_coefs))
})
output$simPlot <- renderPlot({
ggtsdisplay(simulatedData())
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
library(shiny)
library(forecast) # para ggtsdisplay()
# Definir la interfaz de usuario
ui <- fluidPage(
titlePanel("Simulación de Modelo MA(q)"),
sidebarLayout(
sidebarPanel(
sliderInput("n", "Número de observaciones:",
min = 100, max = 5000, value = 1000),
sliderInput("q", "Orden del modelo MA(q):",
min = 1, max = 5, value = 1),
uiOutput("ma_sliders")
),
mainPanel(
plotOutput("simPlot")
)
)
)
# Definir el servidor
server <- function(input, output) {
output$ma_sliders <- renderUI({
sliderInputs <- lapply(1:input$q, function(i) {
sliderInput(
inputId = paste0("ma", i),
label = paste("Coeficiente MA", i, ":"),
min = -0.9, max = 0.9, value = 0, step = 0.1
)
})
do.call(tagList, sliderInputs)
})
simulatedData <- reactive({
set.seed(123)
ma_coefs <- sapply(1:input$q, function(i) input[[paste0("ma", i)]])
arima.sim(n = input$n, model = list(ma = ma_coefs), innov=rnorm(input$n))
})
output$simPlot <- renderPlot({
ggtsdisplay(simulatedData())
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
O=matrix(c(24,12,31,71), nrow = 2, byrow = T)
colnames(O)=c("Mano der", "Mano izq")
rownames(O)=c("pie der", "pie izq")
O
O=matrix(c(24,12,31,71), nrow = 2, byrow = T)
colnames(O)=c("Anorexia", "No Anorexia")
rownames(O)=c("UCI", "No UCI")
O
O_chisq = chisq.test(O)
O_chisq
kable(addmargins(O_chisq$expected))
library(sjPlot)
library(sjmisc)
library(sjlabelled)
kable(addmargins(O_chisq$expected))
library(kableExtra)
kable(addmargins(O_chisq$expected))
par(mfrow = c(1, 2))
mosaicplot(O,  col = 3:5, main= "Valores observados",)
mosaicplot(O_chisq$expected, col = 3:5, main= "Valores esperados")
O_chisq = chisq.test(O)
library("factoextra")
library("FactoMineR")
library("gplots")
library("dplyr")
O=matrix(c(24,12,31,71), nrow = 2, byrow = T)
colnames(O)=c("Anorexia", "No Anorexia")
rownames(O)=c("UCI", "No UCI")
O
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(kableExtra)
O_chisq = chisq.test(O)
kable(addmargins(O_chisq$expected))
par(mfrow = c(1, 2))
mosaicplot(O,  col = 3:5, main= "Valores observados",)
mosaicplot(O_chisq$expected, col = 3:5, main= "Valores esperados")
O_chisq = chisq.test(O)
O_chisq
O_chisq$expected
library("gplots")  # tabla de cotingencia plot
balloonplot(as.table(O),label=T)
O_CA=CA(O, graph = F)
O_CA
O_CA$eig
get_eigenvalue(O_CA)
fviz_screeplot(O_CA,addlabels=T)
O_CA$col$coord
O_CA$row$coord
fviz_ca_biplot(O_CA, repel = T)
install.packages("ExPanDaR")
library(ExPanDaR)
?ExPanDaR
admi
data(admi)
library(factoextra)
data(admi)
library(FactoClass)
data(admi)
admi
ExPanD(admi)
install.packages("visdat")
library(visdat)
vis_dat(admi)
vis_dat(admi)
vis_dat(admi)
vis_dat(admi)
vis_cor(admi)
vis_cor(admi)
vis_guess(admi)
ExPanD(admi)
install.packages("esquisse")
library(esquisse)
esquisser(data = mtcars)
esquisser(data = admi)
